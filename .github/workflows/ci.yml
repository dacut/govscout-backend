name: LambdaDeploy

on:
  push:
    branches:
      - main
      - dev
      - prod
  pull_request_target:
    branches:
      - main
      - dev
      - prod
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:            
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: "aarch64-unknown-linux-gnu,x86_64-unknown-linux-gnu"
      - uses: actions/checkout@v4
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Run formatting check.
        run: cargo fmt --check
      - name: Run clippy check.
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Build
        run: cargo build --all-targets
      - name: Test
        run: cargo test --all-targets --all-features
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 30
    needs: check
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.REGION }}
          role-to-assume: ${{ vars.ROLE_ARN }}
      - uses: actions/checkout@v4
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ vars.ECR_REGISTRY_URL }}
          mask-password: "true"
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        run: |
          aws --region us-east-1 ecr-public get-login-password | docker login --username AWS --password-stdin public.ecr.aws
          export IMAGE_TAG=$(date -u +%Y%m%dT%H%M%S)
          docker build . -f Dockerfile -t "${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
          docker push "${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
          echo "Pushed ${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
