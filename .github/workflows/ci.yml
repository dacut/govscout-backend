name: LambdaDeploy

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: "aarch64-unknown-linux-gnu,x86_64-unknown-linux-gnu"
      - name: Run formatting check.
        run: cargo fmt --check
      - name: Run clippy check.
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Test
        run: cargo test --all-targets --all-features
      - name: Build
        run: cargo build --release --all-targets
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 10
    needs: check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.ROLE_ARN != '' && vars.REGION != '' && vars.ECR_REGISTRY_URL != ''
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.REGION }}
          role-to-assume: ${{ vars.ROLE_ARN }}
      - uses: actions/checkout@v4
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ vars.ECR_REGISTRY_URL }}
          mask-password: "true"
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        run: |
          export IMAGE_TAG=$(date -u +%Y%m%dT%H%M%S)
          docker build . -f Dockerfile -t "${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
          docker push "${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
          echo "Pushed ${{ vars.ECR_REGISTRY_URL }}:$IMAGE_TAG"
