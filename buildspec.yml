version: 0.2

env:
  shell: bash
artifacts:
  files:
    - imagetag.txt
phases:
  install:
    on-failure: ABORT
    commands:
      - '[[ ! -z "$ECR_REPOSITORY_URL" ]] || { echo "ECR_REPOSITORY_URL is not set"; exit 1; }'
      - yum install -y perl-FindBin perl-IPC-Cmd
      - |
        curl --proto '=https' --tlsv1.2 -sSf -o rustup.sh https://sh.rustup.rs \
        && chmod +x rustup.sh \
        && ./rustup.sh -y --profile default --default-toolchain stable-aarch64-unknown-linux-gnu \
        && rm rustup.sh \
        && export PATH="${HOME}/.cargo/bin:${PATH}"
  build:
    on-failure: ABORT
    commands:
      - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
      - aws --region us-east-1 ecr-public get-login-password | docker login --username AWS --password-stdin public.ecr.aws
      - export PATH="${HOME}/.cargo/bin:${PATH}"
      - cargo fmt --check
      - cargo clippy --all-features -- -D warnings
      - cargo test --all-features
      - cargo build --release
      - export IMAGE_TAG=$(date -u +%Y%m%dT%H%M%S); echo "$IMAGE_TAG" | tee imagetag.txt
      - docker buildx build --platform linux/arm64 -f codebuild.dockerfile -t "${ECR_REPOSITORY_URL}:${IMAGE_TAG}" --push .
      - echo "Pushed ${ECR_REPOSITORY_URL}:${IMAGE_TAG}"
  post_build:
    on-failure: ABORT
    commands:
      - |
        if [[ ! -z "$LAMBDA_FUNCTION_NAME" ]]; then
          IMAGE_TAG=$(cat imagetag.txt)
          echo aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri "${ECR_REPOSITORY_URL}:${IMAGE_TAG}";
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri "${ECR_REPOSITORY_URL}:${IMAGE_TAG}"
        fi